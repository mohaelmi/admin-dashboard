{"version":3,"file":"static/webpack/static\\development\\pages\\users-page.js.fc8ffc7036da28ed47c0.hot-update.js","sources":["webpack:///./components/users.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\n// import PropTypes from 'prop-types'; \r\nimport {  CreateUsers, fetchUsers } from \"../redux/actions/userActions\";\r\nimport  Userform  from \"./userForm\";\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport { Grid } from '@material-ui/core';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\n\r\n\r\nclass Users extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            last_edited_user: null,\r\n            open: false, \r\n            setOpen: false,\r\n            currentUser: '',\r\n            users: null,\r\n            last_updated_user: null,\r\n            currentUserName: ''\r\n        }\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.fetchUsers();\r\n        //console.log(this.props.users)\r\n         this.setState({ users: this.props.users })\r\n    }   \r\n    \r\n    componentDidReceiveProps(nextProps){\r\n        if(nextProps.newUser){\r\n            //console.log(nextProps.newUser)\r\n            this.props.users.unshift(nextProps.newUser)\r\n        }\r\n    }\r\n\r\n\r\n    handleChange = (e, user) => {\r\n        user.username = e.target.value\r\n       this.setState({ last_edited_user: user })\r\n       console.log(this.state.last_edited_user)\r\n\r\n    }\r\n    deleteUser = (e, user, i) => {\r\n        console.log(i)\r\n        console.log(this.props.users)\r\n        this.props.users.splice(i, 1)\r\n        console.log(this.props.users)\r\n        this.setState({users: this.props.users })\r\n        console.log(this.state.users)\r\n\r\n    \r\n    } \r\n\r\n    \r\n     handleClose = () => {\r\n        this.setState({ open: false }) \r\n      };\r\n\r\n      updateUser = (e, user) => {\r\n        this.setState({ open: true })\r\n        console.log(user.id)\r\n        this.setState({ currentUserName: user.username })\r\n        console.log(user)\r\n        this.props.users.push(user)\r\n        this.setState({users: this.props.users })\r\n      }\r\n\r\n    render() {\r\n        return(\r\n            \r\n                \r\n        <Grid container style={{ marginTop: 50}}>\r\n            <Grid item sm ={ 8   }>\r\n                \r\n            {\r\n                this.props.users.map((user, i) => (\r\n                   \r\n                    <Box  key={i} component=\"span\" display=\"block\" p={1} m={1} bgcolor=\"#e0e0e0\">\r\n                    <Box  p={1} m={1}>Name: {user.name} </Box>\r\n                    <Box p={1} m={1}>User Name: {user.username}</Box>\r\n                    \r\n                <Fab color=\"primary\" aria-label=\"edit\" onClick={(e) => this.updateUser(e, user)}>\r\n                    <EditIcon />\r\n                </Fab>\r\n                <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\r\n                    <DialogTitle id=\"form-dialog-title\">change user name </DialogTitle>\r\n                    <div >\r\n                    <DialogContent>\r\n                        <TextField onChange={(e) =>  this.handleChange(e, user)}\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            name=\"username\"\r\n                            defaultValue={ this.state.currentUserName }\r\n                            type=\"text\"\r\n                            fullWidth\r\n                           \r\n                        />\r\n\r\n                        \r\n                    </DialogContent>\r\n                    </div>\r\n                    <DialogActions>\r\n                    <Button onClick={this.handleClose} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={ this.handleClose} color=\"primary\">\r\n                        save\r\n                    </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    startIcon={<DeleteIcon />}\r\n                    onClick = { (e)=> this.deleteUser(e, user, i) }\r\n                    >\r\n                    Delete\r\n                    </Button>\r\n                </Box>    \r\n                            ))\r\n                        } \r\n                    </Grid> \r\n                     <Grid item sm bgcolor=\"e0e0e0\">\r\n                        <Box   component=\"span\" display=\"block\" p={1} m={1} bgcolor=\"#e0e0e0\" height= '100%'>\r\n                        <Userform   />\r\n                        </Box>\r\n                     </Grid>\r\n                </Grid>\r\n                                \r\n             \r\n            \r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    users: state.users.users,\r\n    newUser: state.users.user\r\n})\r\n\r\nexport default connect(mapStateToProps, {fetchUsers})(Users)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA8BA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAnCA;AAoCA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AA7CA;AAgDA;AAAA;AAAA;AACA;AACA;AAlDA;AAoDA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAYA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAkaA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnCA;AA+CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;AA9HA;AACA;AAiIA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAIA;AAAA;AAAA;;;;A","sourceRoot":""}
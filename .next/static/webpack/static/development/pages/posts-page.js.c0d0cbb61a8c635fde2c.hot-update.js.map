{"version":3,"file":"static/webpack/static\\development\\pages\\posts-page.js.c0d0cbb61a8c635fde2c.hot-update.js","sources":["webpack:///./components/posts.js"],"sourcesContent":["// import React, { Component } from 'react'\r\n// import { connect } from \"react-redux\";\r\n// import PropTypes from 'prop-types'; \r\n// import Popup from \"reactjs-popup\"\r\n// import   { fetchPosts }  from \"../redux/actions/postActions\";\r\n\r\n// import Layout from '../components/layout'\r\n// import { Provider } from \"react-redux\";\r\n// import  store  from \"../redux/store\";\r\n\r\n// class Posts extends Component {\r\n//     constructor(props) {\r\n//         super(props)\r\n\r\n//         this.state = {\r\n            \r\n//         }\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         // let {users} = this.props;\r\n//         // this.setState({users});\r\n//         this.props.fetchPosts();\r\n//         console.log(this.props)\r\n//         console.log(this.props.posts)\r\n//     } \r\n\r\n//     render() {\r\n//         return (   \r\n            \r\n//             <div> \r\n//                     {\r\n//                         this.props.posts.map((post, i) => (\r\n//                             <div  key={i} >\r\n//                             <h3 >title : {post.title} </h3>\r\n//                             <p >{post.body}</p>\r\n                           \r\n//                 <Popup trigger={<button >update post</button>}\r\n//                     position=\"right center\">\r\n//                     <div>\r\n//                      <textarea  value = { post.username}></textarea>\r\n//                     </div>\r\n//                         <button >save</button>\r\n//                 </Popup>\r\n\r\n//                 <button > delete post</button>\r\n//                 </div>    \r\n//                 ))\r\n//             }  \r\n//             </div>\r\n           \r\n         \r\n//         )\r\n//     }\r\n// }\r\n\r\n// Posts.PropTypes = {\r\n//     fetchPosts: PropTypes.func.isRequired,\r\n//     posts: PropTypes.array.isRequired,\r\n//     // newUser: PropTypes.object \r\n// }\r\n\r\n// const mapStateToProps = (state) => ({\r\n//     posts: state.posts.posts,\r\n//     // newUser: state.users.user\r\n// })\r\n\r\n// export default connect(mapStateToProps, {fetchPosts})(Posts)\r\n\r\n\r\nimport Layout from './layout'\r\nimport React, { Component } from 'react'\r\nimport Popup from \"reactjs-popup\"\r\nimport { connect } from \"react-redux\";\r\n// import PropTypes from 'prop-types'; \r\nimport   { fetchPosts }  from \"../redux/actions/postActions\";\r\nimport  Userform  from \"./userForm\";\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport { Grid } from '@material-ui/core';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\n\r\n\r\nclass Posts extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            last_edited_post: null,\r\n            open: false, \r\n            setOpen: false,\r\n        }\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.fetchPosts();\r\n        console.log(this.props.posts)\r\n       \r\n        //  this.setState({ users: this.props.users })\r\n    }   \r\n    \r\n    componentWillReceiveProps(nextProps){\r\n        // if(nextProps.newUser){\r\n        //     console.log(nextProps.newUser)\r\n        //     this.props.users.unshift(nextProps.newUser)\r\n        // }\r\n    }\r\n\r\n\r\n    // handleChange = (e, user) => {\r\n    //     user.username = e.target.value\r\n    //    this.setState({ last_edited_user: user })\r\n    //    console.log(this.state.last_edited_user)\r\n\r\n    // }\r\n    // deleteUser = (e, user, i) => {\r\n    //     console.log(i)\r\n    //     console.log(this.props.users)\r\n    //     this.props.users.splice(i, 1)\r\n    //     console.log(this.props.users)\r\n    //     this.setState({users: this.props.users })\r\n    //     console.log(this.state.users)\r\n\r\n    \r\n    // } \r\n\r\n    \r\n     handleClose = () => {\r\n        this.setState({ open: false }) \r\n      };\r\n\r\n      updateUser = (e, post) => {\r\n        this.setState({ open: true })\r\n        // console.log(user.id)\r\n        // this.setState({ currentUserName: user.username })\r\n        // console.log(user)\r\n        // this.props.users.push(user)\r\n        // this.setState({users: this.props.users })\r\n      }\r\n\r\n    render() {\r\n        return(\r\n            \r\n                \r\n        <Grid container style={{ marginTop: 50}}>\r\n            <Grid item sm ={ 8   }>\r\n                \r\n            {\r\n                this.props.posts.map((post, i) => (\r\n                   \r\n                    <Box  key={i} component=\"span\" display=\"block\" p={1} m={1} bgcolor=\"#e0e0e0\">\r\n                    <Box  p={1} m={1}> {post.title} </Box>\r\n                    <Box p={1} m={1}> {post.body}</Box>\r\n                    \r\n                <Fab color=\"primary\" aria-label=\"edit\" onClick={(e) => this.updateUser(e, post)}>\r\n                    <EditIcon />\r\n                </Fab>\r\n                <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\r\n                    <DialogTitle id=\"form-dialog-title\">change post body </DialogTitle>\r\n                    <div >\r\n                    <DialogContent>\r\n                    {/* <textarea   style={{ width: '200px' }} value = { post.body}></textarea> */}\r\n                        <TextField \r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            name=\"post body\"\r\n                            label=\"post body\"\r\n                            type=\"Text Areas\"\r\n                         \r\n                           \r\n                        />\r\n\r\n                        \r\n                    </DialogContent>\r\n                    </div>\r\n                    <DialogActions>\r\n                    <Button onClick={this.handleClose} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={ this.handleClose} color=\"primary\">\r\n                        save\r\n                    </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    startIcon={<DeleteIcon />}\r\n                    // onClick = { (e)=> this.deleteUser(e, user, i) }\r\n                    >\r\n                    Delete\r\n                    </Button>\r\n                </Box>    \r\n                            ))\r\n                        } \r\n                    </Grid> \r\n                     {/* <Grid item sm bgcolor=\"e0e0e0\">\r\n                        <Box   component=\"span\" display=\"block\" p={1} m={1} bgcolor=\"#e0e0e0\" height= '98%'>\r\n                        <Userform   />\r\n                        </Box>\r\n                     </Grid> */}\r\n                </Grid>\r\n                                \r\n             \r\n            \r\n        )\r\n    }\r\n}\r\n\r\n// Users.propTypes = {\r\n//     fetchUsers: PropTypes.func.isRequired,\r\n//     users: PropTypes.array.isRequired,\r\n//     newUser: PropTypes.object \r\n// }\r\n\r\nconst mapStateToProps = (state) => ({\r\n    posts: state.posts.posts\r\n    // newUser: state.users.user\r\n})\r\n\r\nexport default connect(mapStateToProps, {fetchPosts})(Posts)\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA6CA;AAAA;AAAA;AACA;AACA;AA/CA;AAiDA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAtDA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;;;AAEA;AACA;AACA;AAGA;;;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;AAeA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AApCA;AA0DA;;;;AA5HA;AAgIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAIA;AAAA;AAAA;;;;A","sourceRoot":""}
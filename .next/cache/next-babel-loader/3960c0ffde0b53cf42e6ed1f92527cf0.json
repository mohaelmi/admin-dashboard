{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\sitekey\\\\Desktop\\\\admin-dashboard\\\\components\\\\posts.js\";\nvar __jsx = React.createElement;\nimport Layout from './layout';\nimport React, { Component } from 'react';\nimport Popup from \"reactjs-popup\";\nimport { connect } from \"react-redux\"; // import PropTypes from 'prop-types'; \n\nimport { fetchPosts } from \"../redux/actions/postActions\";\nimport PostForm from \"./postForm\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport AddIcon from '@material-ui/icons/Add';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Fab from '@material-ui/core/Fab';\nimport { Grid } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\n\nclass Posts extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleChange\", (e, post) => {\n      post.body = e.target.value;\n      this.setState({\n        last_edited_post: post\n      });\n      console.log(this.state.last_edited_post);\n    });\n\n    _defineProperty(this, \"deletePost\", (e, post, i) => {\n      console.log(i);\n      console.log(this.props.posts);\n      this.props.posts.splice(i, 1);\n      console.log(this.props.posts);\n      this.setState({\n        posts: this.props.users\n      });\n      console.log(this.state.users);\n    });\n\n    _defineProperty(this, \"handleClose\", () => {\n      this.setState({\n        open: false\n      });\n    });\n\n    _defineProperty(this, \"updatePost\", (e, post) => {\n      this.setState({\n        open: true\n      });\n      console.log(post.id);\n      this.setState({\n        currentPostBody: post.body\n      });\n      console.log(post);\n      this.props.posts.push(post);\n      this.setState({\n        posts: this.props.posts\n      });\n    });\n\n    this.state = {\n      posts: [],\n      currentPostBody: '',\n      last_edited_post: null,\n      open: false,\n      setOpen: false\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchPosts();\n    console.log(this.props.posts);\n    this.setState({\n      posts: this.props.posts\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.newPost) {\n      console.log(nextProps.newPost);\n      this.props.posts.unshift(nextProps.newPost);\n    }\n  }\n\n  render() {\n    return __jsx(Grid, {\n      container: true,\n      style: {\n        marginTop: 50\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, __jsx(Grid, {\n      item: true,\n      sm: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, this.props.posts.map((post, i) => __jsx(Box, {\n      key: i,\n      component: \"span\",\n      display: \"block\",\n      p: 1,\n      m: 1,\n      bgcolor: \"#e0e0e0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, __jsx(Box, {\n      p: 1,\n      m: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, __jsx(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \" \", post.title, \" \")), __jsx(Box, {\n      p: 1,\n      m: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \" \", post.body), __jsx(Fab, {\n      color: \"primary\",\n      \"aria-label\": \"edit\",\n      onClick: e => this.updatePost(e, post),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, __jsx(EditIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })), __jsx(Dialog, {\n      open: this.state.open,\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, __jsx(DialogTitle, {\n      id: \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"change post body \"), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, __jsx(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, __jsx(TextField, {\n      onChange: e => this.handleChange(e, post),\n      margin: \"dense\",\n      name: \"post body\",\n      defaultValue: this.state.currentPostBody,\n      multiline: true,\n      rows: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }))), __jsx(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, __jsx(Button, {\n      onClick: this.handleClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Cancel\"), __jsx(Button, {\n      onClick: this.handleClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"save\"))), __jsx(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      startIcon: __jsx(DeleteIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }),\n      onClick: e => this.deletePost(e, post, i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Delete\")))), __jsx(Grid, {\n      item: true,\n      sm: true,\n      bgcolor: \"e0e0e0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, __jsx(Box, {\n      component: \"span\",\n      display: \"block\",\n      p: 1,\n      m: 1,\n      bgcolor: \"#e0e0e0\",\n      height: \"100%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, __jsx(PostForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }))));\n  }\n\n} // Users.propTypes = {\n//     fetchUsers: PropTypes.func.isRequired,\n//     users: PropTypes.array.isRequired,\n//     newUser: PropTypes.object \n// }\n\n\nconst mapStateToProps = state => ({\n  posts: state.posts.posts,\n  newPost: state.posts.post\n});\n\nexport default connect(mapStateToProps, {\n  fetchPosts\n})(Posts);","map":{"version":3,"sources":["C:/Users/sitekey/Desktop/admin-dashboard/components/posts.js"],"names":["Layout","React","Component","Popup","connect","fetchPosts","PostForm","Button","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","AddIcon","EditIcon","DeleteIcon","Fab","Grid","Box","Posts","constructor","props","e","post","body","target","value","setState","last_edited_post","console","log","state","i","posts","splice","users","open","id","currentPostBody","push","setOpen","componentDidMount","componentWillReceiveProps","nextProps","newPost","unshift","render","marginTop","map","title","updatePost","handleClose","handleChange","deletePost","mapStateToProps"],"mappings":"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","sourcesContent":["import Layout from './layout'\r\nimport React, { Component } from 'react'\r\nimport Popup from \"reactjs-popup\"\r\nimport { connect } from \"react-redux\";\r\n// import PropTypes from 'prop-types'; \r\nimport   { fetchPosts }  from \"../redux/actions/postActions\";\r\nimport  PostForm  from \"./postForm\";\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport { Grid } from '@material-ui/core';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\n\r\n\r\nclass Posts extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            posts: [],\r\n            currentPostBody: '',\r\n            last_edited_post: null,\r\n            open: false, \r\n            setOpen: false,\r\n        }\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.fetchPosts();\r\n        console.log(this.props.posts)\r\n       \r\n     this.setState({ posts: this.props.posts })\r\n    }   \r\n    \r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.newPost){\r\n            console.log(nextProps.newPost)\r\n            this.props.posts.unshift(nextProps.newPost)\r\n        }\r\n    }\r\n\r\n\r\n    handleChange = (e, post) => {\r\n        post.body = e.target.value\r\n       this.setState({ last_edited_post: post })\r\n       console.log(this.state.last_edited_post)\r\n\r\n    }\r\n    deletePost = (e, post, i) => {\r\n        console.log(i)\r\n        console.log(this.props.posts)\r\n        this.props.posts.splice(i, 1)\r\n        console.log(this.props.posts)\r\n        this.setState({posts: this.props.users })\r\n        console.log(this.state.users)\r\n\r\n    \r\n    } \r\n\r\n    \r\n     handleClose = () => {\r\n        this.setState({ open: false }) \r\n      };\r\n\r\n      updatePost = (e, post) => {\r\n        this.setState({ open: true })\r\n        console.log(post.id)\r\n        this.setState({ currentPostBody: post.body })\r\n        console.log(post)\r\n        this.props.posts.push(post)\r\n        this.setState({posts: this.props.posts })\r\n      }\r\n\r\n    render() {\r\n        return(\r\n            \r\n                \r\n        <Grid container style={{ marginTop: 50}}>\r\n            <Grid item sm ={ 8   }>\r\n                \r\n            {\r\n                this.props.posts.map((post, i) => (\r\n                   \r\n                    <Box  key={i} component=\"span\" display=\"block\" p={1} m={1} bgcolor=\"#e0e0e0\">\r\n                    <Box  p={1} m={1}><h3> {post.title} </h3></Box>\r\n                    <Box p={1} m={1}> {post.body}</Box>\r\n                    \r\n                <Fab color=\"primary\" aria-label=\"edit\" onClick={(e) => this.updatePost(e, post)}>\r\n                    <EditIcon />\r\n                </Fab>\r\n                <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\r\n                    <DialogTitle id=\"form-dialog-title\">change post body </DialogTitle>\r\n                    <div >\r\n                    <DialogContent>\r\n                    {/* <textarea   style={{ width: '200px' }} value = { post.body}></textarea> */}\r\n                        <TextField onChange={(e) =>  this.handleChange(e, post)}\r\n                            margin=\"dense\"\r\n                            name=\"post body\"\r\n                            defaultValue={ this.state.currentPostBody }\r\n                            multiline = {true}\r\n                            rows = '10'                         \r\n                           \r\n                        />\r\n\r\n                        \r\n                    </DialogContent>\r\n                    </div>\r\n                    <DialogActions>\r\n                    <Button onClick={this.handleClose} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={ this.handleClose} color=\"primary\">\r\n                        save\r\n                    </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    startIcon={<DeleteIcon />}\r\n                     onClick = { (e)=> this.deletePost(e, post, i) }\r\n                    >\r\n                    Delete\r\n                    </Button>\r\n                </Box>    \r\n                            ))\r\n                        } \r\n                    </Grid> \r\n                     <Grid item sm bgcolor=\"e0e0e0\">\r\n                        <Box   component=\"span\" display=\"block\" p={1} m={1} bgcolor=\"#e0e0e0\" height= '100%'>\r\n                        <PostForm   />\r\n                        </Box>\r\n                     </Grid>\r\n                </Grid>\r\n                                \r\n             \r\n            \r\n        )\r\n    }\r\n}\r\n\r\n// Users.propTypes = {\r\n//     fetchUsers: PropTypes.func.isRequired,\r\n//     users: PropTypes.array.isRequired,\r\n//     newUser: PropTypes.object \r\n// }\r\n\r\nconst mapStateToProps = (state) => ({\r\n    posts: state.posts.posts,\r\n    newPost: state.posts.post\r\n})\r\n\r\nexport default connect(mapStateToProps, {fetchPosts})(Posts)\r\n"]},"metadata":{},"sourceType":"module"}
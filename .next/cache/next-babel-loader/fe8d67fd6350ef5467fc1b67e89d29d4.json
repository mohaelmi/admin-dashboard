{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\sitekey\\\\Desktop\\\\admin-dashboard\\\\components\\\\posts.js\";\nvar __jsx = React.createElement;\n// import React, { Component } from 'react'\n// import { connect } from \"react-redux\";\n// import PropTypes from 'prop-types'; \n// import Popup from \"reactjs-popup\"\n// import   { fetchPosts }  from \"../redux/actions/postActions\";\n// import Layout from '../components/layout'\n// import { Provider } from \"react-redux\";\n// import  store  from \"../redux/store\";\n// class Posts extends Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//         }\n//     }\n//     componentDidMount() {\n//         // let {users} = this.props;\n//         // this.setState({users});\n//         this.props.fetchPosts();\n//         console.log(this.props)\n//         console.log(this.props.posts)\n//     } \n//     render() {\n//         return (   \n//             <div> \n//                     {\n//                         this.props.posts.map((post, i) => (\n//                             <div  key={i} >\n//                             <h3 >title : {post.title} </h3>\n//                             <p >{post.body}</p>\n//                 <Popup trigger={<button >update post</button>}\n//                     position=\"right center\">\n//                     <div>\n//                      <textarea  value = { post.username}></textarea>\n//                     </div>\n//                         <button >save</button>\n//                 </Popup>\n//                 <button > delete post</button>\n//                 </div>    \n//                 ))\n//             }  \n//             </div>\n//         )\n//     }\n// }\n// Posts.PropTypes = {\n//     fetchPosts: PropTypes.func.isRequired,\n//     posts: PropTypes.array.isRequired,\n//     // newUser: PropTypes.object \n// }\n// const mapStateToProps = (state) => ({\n//     posts: state.posts.posts,\n//     // newUser: state.users.user\n// })\n// export default connect(mapStateToProps, {fetchPosts})(Posts)\nimport Layout from './layout';\nimport React, { Component } from 'react';\nimport Popup from \"reactjs-popup\";\nimport { connect } from \"react-redux\"; // import PropTypes from 'prop-types'; \n\nimport { fetchPosts } from \"../redux/actions/postActions\";\nimport Userform from \"./userForm\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport AddIcon from '@material-ui/icons/Add';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Fab from '@material-ui/core/Fab';\nimport { Grid } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\n\nclass Posts extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleClose\", () => {\n      this.setState({\n        open: false\n      });\n    });\n\n    _defineProperty(this, \"updateUser\", (e, post) => {\n      this.setState({\n        open: true\n      }); // console.log(user.id)\n      // this.setState({ currentUserName: user.username })\n      // console.log(user)\n      // this.props.users.push(user)\n      // this.setState({users: this.props.users })\n    });\n\n    this.state = {\n      last_edited_post: null,\n      open: false,\n      setOpen: false\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchPosts();\n    console.log(this.props.posts); //  this.setState({ users: this.props.users })\n  }\n\n  componentWillReceiveProps(nextProps) {} // if(nextProps.newUser){\n  //     console.log(nextProps.newUser)\n  //     this.props.users.unshift(nextProps.newUser)\n  // }\n  // handleChange = (e, user) => {\n  //     user.username = e.target.value\n  //    this.setState({ last_edited_user: user })\n  //    console.log(this.state.last_edited_user)\n  // }\n  // deleteUser = (e, user, i) => {\n  //     console.log(i)\n  //     console.log(this.props.users)\n  //     this.props.users.splice(i, 1)\n  //     console.log(this.props.users)\n  //     this.setState({users: this.props.users })\n  //     console.log(this.state.users)\n  // } \n\n\n  render() {\n    return __jsx(Grid, {\n      container: true,\n      style: {\n        marginTop: 50\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, __jsx(Grid, {\n      item: true,\n      sm: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, this.props.posts.map((post, i) => __jsx(Box, {\n      key: i,\n      component: \"span\",\n      display: \"block\",\n      p: 1,\n      m: 1,\n      bgcolor: \"#e0e0e0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, __jsx(Box, {\n      p: 1,\n      m: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \" \", post.title, \" \"), __jsx(Box, {\n      p: 1,\n      m: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \" \", post.body), __jsx(Fab, {\n      color: \"primary\",\n      \"aria-label\": \"edit\",\n      onClick: e => this.updateUser(e, post),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, __jsx(EditIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    })), __jsx(Dialog, {\n      open: this.state.open,\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, __jsx(DialogTitle, {\n      id: \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"change post body \"), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, __jsx(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, __jsx(TextField, {\n      autoFocus: true,\n      margin: \"dense\",\n      name: \"post body\",\n      label: \"post body\",\n      type: \"text\",\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }))), __jsx(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, __jsx(Button, {\n      onClick: this.handleClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"Cancel\"), __jsx(Button, {\n      onClick: this.handleClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"save\"))), __jsx(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      startIcon: __jsx(DeleteIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }) // onClick = { (e)=> this.deleteUser(e, user, i) }\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"Delete\")))));\n  }\n\n} // Users.propTypes = {\n//     fetchUsers: PropTypes.func.isRequired,\n//     users: PropTypes.array.isRequired,\n//     newUser: PropTypes.object \n// }\n\n\nconst mapStateToProps = state => ({\n  posts: state.posts.posts // newUser: state.users.user\n\n});\n\nexport default connect(mapStateToProps, {\n  fetchPosts\n})(Posts);","map":{"version":3,"sources":["C:/Users/sitekey/Desktop/admin-dashboard/components/posts.js"],"names":["Layout","React","Component","Popup","connect","fetchPosts","Userform","Button","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","AddIcon","EditIcon","DeleteIcon","Fab","Grid","Box","Posts","constructor","props","setState","open","e","post","state","last_edited_post","setOpen","componentDidMount","console","log","posts","componentWillReceiveProps","nextProps","render","marginTop","map","i","title","body","updateUser","handleClose","mapStateToProps"],"mappings":"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","sourcesContent":["// import React, { Component } from 'react'\r\n// import { connect } from \"react-redux\";\r\n// import PropTypes from 'prop-types'; \r\n// import Popup from \"reactjs-popup\"\r\n// import   { fetchPosts }  from \"../redux/actions/postActions\";\r\n\r\n// import Layout from '../components/layout'\r\n// import { Provider } from \"react-redux\";\r\n// import  store  from \"../redux/store\";\r\n\r\n// class Posts extends Component {\r\n//     constructor(props) {\r\n//         super(props)\r\n\r\n//         this.state = {\r\n            \r\n//         }\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         // let {users} = this.props;\r\n//         // this.setState({users});\r\n//         this.props.fetchPosts();\r\n//         console.log(this.props)\r\n//         console.log(this.props.posts)\r\n//     } \r\n\r\n//     render() {\r\n//         return (   \r\n            \r\n//             <div> \r\n//                     {\r\n//                         this.props.posts.map((post, i) => (\r\n//                             <div  key={i} >\r\n//                             <h3 >title : {post.title} </h3>\r\n//                             <p >{post.body}</p>\r\n                           \r\n//                 <Popup trigger={<button >update post</button>}\r\n//                     position=\"right center\">\r\n//                     <div>\r\n//                      <textarea  value = { post.username}></textarea>\r\n//                     </div>\r\n//                         <button >save</button>\r\n//                 </Popup>\r\n\r\n//                 <button > delete post</button>\r\n//                 </div>    \r\n//                 ))\r\n//             }  \r\n//             </div>\r\n           \r\n         \r\n//         )\r\n//     }\r\n// }\r\n\r\n// Posts.PropTypes = {\r\n//     fetchPosts: PropTypes.func.isRequired,\r\n//     posts: PropTypes.array.isRequired,\r\n//     // newUser: PropTypes.object \r\n// }\r\n\r\n// const mapStateToProps = (state) => ({\r\n//     posts: state.posts.posts,\r\n//     // newUser: state.users.user\r\n// })\r\n\r\n// export default connect(mapStateToProps, {fetchPosts})(Posts)\r\n\r\n\r\nimport Layout from './layout'\r\nimport React, { Component } from 'react'\r\nimport Popup from \"reactjs-popup\"\r\nimport { connect } from \"react-redux\";\r\n// import PropTypes from 'prop-types'; \r\nimport   { fetchPosts }  from \"../redux/actions/postActions\";\r\nimport  Userform  from \"./userForm\";\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport { Grid } from '@material-ui/core';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\n\r\n\r\nclass Posts extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            last_edited_post: null,\r\n            open: false, \r\n            setOpen: false,\r\n        }\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.fetchPosts();\r\n        console.log(this.props.posts)\r\n       \r\n        //  this.setState({ users: this.props.users })\r\n    }   \r\n    \r\n    componentWillReceiveProps(nextProps){\r\n        // if(nextProps.newUser){\r\n        //     console.log(nextProps.newUser)\r\n        //     this.props.users.unshift(nextProps.newUser)\r\n        // }\r\n    }\r\n\r\n\r\n    // handleChange = (e, user) => {\r\n    //     user.username = e.target.value\r\n    //    this.setState({ last_edited_user: user })\r\n    //    console.log(this.state.last_edited_user)\r\n\r\n    // }\r\n    // deleteUser = (e, user, i) => {\r\n    //     console.log(i)\r\n    //     console.log(this.props.users)\r\n    //     this.props.users.splice(i, 1)\r\n    //     console.log(this.props.users)\r\n    //     this.setState({users: this.props.users })\r\n    //     console.log(this.state.users)\r\n\r\n    \r\n    // } \r\n\r\n    \r\n     handleClose = () => {\r\n        this.setState({ open: false }) \r\n      };\r\n\r\n      updateUser = (e, post) => {\r\n        this.setState({ open: true })\r\n        // console.log(user.id)\r\n        // this.setState({ currentUserName: user.username })\r\n        // console.log(user)\r\n        // this.props.users.push(user)\r\n        // this.setState({users: this.props.users })\r\n      }\r\n\r\n    render() {\r\n        return(\r\n            \r\n                \r\n        <Grid container style={{ marginTop: 50}}>\r\n            <Grid item sm ={ 8   }>\r\n                \r\n            {\r\n                this.props.posts.map((post, i) => (\r\n                   \r\n                    <Box  key={i} component=\"span\" display=\"block\" p={1} m={1} bgcolor=\"#e0e0e0\">\r\n                    <Box  p={1} m={1}> {post.title} </Box>\r\n                    <Box p={1} m={1}> {post.body}</Box>\r\n                    \r\n                <Fab color=\"primary\" aria-label=\"edit\" onClick={(e) => this.updateUser(e, post)}>\r\n                    <EditIcon />\r\n                </Fab>\r\n                <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\r\n                    <DialogTitle id=\"form-dialog-title\">change post body </DialogTitle>\r\n                    <div >\r\n                    <DialogContent>\r\n                        <TextField \r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            name=\"post body\"\r\n                            label=\"post body\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                           \r\n                        />\r\n\r\n                        \r\n                    </DialogContent>\r\n                    </div>\r\n                    <DialogActions>\r\n                    <Button onClick={this.handleClose} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={ this.handleClose} color=\"primary\">\r\n                        save\r\n                    </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    startIcon={<DeleteIcon />}\r\n                    // onClick = { (e)=> this.deleteUser(e, user, i) }\r\n                    >\r\n                    Delete\r\n                    </Button>\r\n                </Box>    \r\n                            ))\r\n                        } \r\n                    </Grid> \r\n                     {/* <Grid item sm bgcolor=\"e0e0e0\">\r\n                        <Box   component=\"span\" display=\"block\" p={1} m={1} bgcolor=\"#e0e0e0\" height= '98%'>\r\n                        <Userform   />\r\n                        </Box>\r\n                     </Grid> */}\r\n                </Grid>\r\n                                \r\n             \r\n            \r\n        )\r\n    }\r\n}\r\n\r\n// Users.propTypes = {\r\n//     fetchUsers: PropTypes.func.isRequired,\r\n//     users: PropTypes.array.isRequired,\r\n//     newUser: PropTypes.object \r\n// }\r\n\r\nconst mapStateToProps = (state) => ({\r\n    posts: state.posts.posts\r\n    // newUser: state.users.user\r\n})\r\n\r\nexport default connect(mapStateToProps, {fetchPosts})(Posts)\r\n"]},"metadata":{},"sourceType":"module"}